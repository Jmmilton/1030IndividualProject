{"ast":null,"code":"var _jsxFileName = \"/Users/jay/Desktop/school/1030/courseProject-individual/src/components/login/AdminPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport Nav from '../nav/nav';\nimport { Container, Col, Row, Button } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AdminPage = () => {\n  _s();\n\n  let location = useLocation();\n  let pathname = location.pathname;\n  let providerID = pathname.substring(7);\n  let history = useHistory();\n  const token = sessionStorage.getItem('token');\n  const [userInfo, setUserInfo] = useState([]);\n  const [admin, setAdmin] = useState(false);\n  const [careProviderSearchID, setCareProviderSearchID] = useState(\"\");\n  const [careProviderSearchResults, setCareProviderSearchResults] = useState([]);\n  const [careProviderResult, setCareProviderResult] = useState(true);\n  const [patientSearchID, setPatientSearchID] = useState(\"\");\n  const [patientSearchResults, setPatientSearchResults] = useState([]);\n  const [patientResult, setPatientResult] = useState(true); // UseEffect function to load authenticated users information\n  // useEffect(() => {\n  //     const getUserData = async () => {\n  //         const response = await fetch(`http://localhost:4000/care_provider/${providerID}`, {\n  //             method: 'GET',\n  //             headers: {\n  //                 'Authorization': `Bearer ${token}`\n  //             }          \n  //         })\n  //         const payload = await response.json()\n  //         setUserInfo(payload)\n  //         if (payload[0].isAdmin === 1) {\n  //             setAdmin(true)\n  //         }\n  //     }\n  //     getUserData()    \n  // }, [providerID, token])\n  // // Search Care Provider function by employee ID\n  // const searchCareProvider = async event => {\n  //     event.preventDefault()\n  //     const getCareProvider = async () => {\n  //         const response = await fetch(`http://localhost:4000/care_provider/${careProviderSearchID}`, {\n  //             method: 'GET',\n  //             headers: {\n  //                 'Authorization': `Bearer ${token}`\n  //             }          \n  //         })\n  //         const payload = await response.json()\n  //         if (response.status >= 400) {\n  //             setCareProviderResult(false)\n  //         } else {\n  //             setCareProviderResult(true)\n  //         }\n  //         setCareProviderSearchResults(payload)\n  //     }\n  //     getCareProvider()    \n  // }\n  // // Search Patients function by health card number (10 digits)\n  // const searchPatient = async event => {\n  //     event.preventDefault()\n  //     const getPatient = async () => {\n  //         const response = await fetch(`http://localhost:4000/patient/${patientSearchID}`, {\n  //             method: 'GET',\n  //             headers: {\n  //                 'Authorization': `Bearer ${token}`\n  //             }          \n  //         })\n  //         const payload = await response.json()\n  //         if (response.status >= 400) {\n  //             setPatientResult(false)\n  //         } else {\n  //             setPatientResult(true)\n  //         }\n  //         setPatientSearchResults(payload)\n  //     }\n  //     getPatient()    \n  // }\n  // Delete care provider function\n  // const deleteCareProvider = async event => {\n  //     let id = careProviderSearchResults[0].careProviderID\n  //     event.preventDefault()\n  //     const deleteRow = async () => {\n  //         const response = await fetch(`http://localhost:4000/care_provider/${id}`, {\n  //             method: 'DELETE',\n  //             headers: {\n  //             }          \n  //         })\n  //         const payload = await response.json()\n  //         alert(payload.message)\n  //         setCareProviderSearchResults([])\n  //     }\n  //     deleteRow()    \n  // }\n  // // Delete patient function\n  // const deletePatient = async event => {\n  //     let id = patientSearchResults[0].HCN\n  //     event.preventDefault()\n  //     const deleteRow = async () => {\n  //         const response = await fetch(`http://localhost:4000/patient/${id}`, {\n  //             method: 'DELETE',\n  //             headers: {\n  //             }          \n  //         })\n  //         const payload = await response.json()\n  //         alert(payload.message)\n  //         setPatientSearchResults([])\n  //     }\n  //     deleteRow()    \n  // }\n  // // To add link to provider page with matching careProviderID\n  // const viewCareProvider = () => {\n  //     history.push(`careproviders/${careProviderSearchID}/${providerID}`)\n  // }\n  // // To add link to patient details page with matching HCN\n  // const viewPatient = () => {\n  //     history.push(`patients/${patientSearchID}/${providerID}`)\n  // }\n  // // To add link to add a care provider\n  // const addCareProvider = () => {\n  //     history.push(`/admin/addprovider`)\n  // }\n  // // To add link to add a patient\n  // const addPatient = () => {\n  //     history.push(`/admin/addpatient`)\n  // }\n  // Logout function\n\n  const logout = event => {\n    event.preventDefault();\n    sessionStorage.removeItem('token');\n    history.push(\"/login\");\n  }; // // Format DOB function\n  // const formatDOB = (date) => {\n  //     if (date) {\n  //         const cleanDate = date.substring(0,10)\n  //         return cleanDate\n  //     } else {\n  //         return date\n  //     }\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"lessCentered\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"work-h2\",\n        children: \"Administrator Portal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        outline: true,\n        color: \"primary\",\n        onClick: logout,\n        children: \"LOGOUT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"manage\",\n            children: \"Manage Resume\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"manage\",\n            children: \"Manage Projects\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AdminPage, \"/XMPXiame22D8+f18jLx5me43uA=\", false, function () {\n  return [useLocation, useHistory];\n});\n\n_c = AdminPage;\nexport default AdminPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminPage\");","map":{"version":3,"sources":["/Users/jay/Desktop/school/1030/courseProject-individual/src/components/login/AdminPage.jsx"],"names":["React","useEffect","useState","useHistory","useLocation","Nav","Container","Col","Row","Button","AdminPage","location","pathname","providerID","substring","history","token","sessionStorage","getItem","userInfo","setUserInfo","admin","setAdmin","careProviderSearchID","setCareProviderSearchID","careProviderSearchResults","setCareProviderSearchResults","careProviderResult","setCareProviderResult","patientSearchID","setPatientSearchID","patientSearchResults","setPatientSearchResults","patientResult","setPatientResult","logout","event","preventDefault","removeItem","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,kBAAxC;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EACIC,MADJ,QACiB,YADjB;;;AAIA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEpB,MAAIC,QAAQ,GAAGP,WAAW,EAA1B;AACA,MAAIQ,QAAQ,GAAGD,QAAQ,CAACC,QAAxB;AACA,MAAIC,UAAU,GAAGD,QAAQ,CAACE,SAAT,CAAmB,CAAnB,CAAjB;AACA,MAAIC,OAAO,GAAGZ,UAAU,EAAxB;AAEA,QAAMa,KAAK,GAAGC,cAAc,CAACC,OAAf,CAAuB,OAAvB,CAAd;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACmB,KAAD,EAAQC,QAAR,IAAoBpB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACqB,oBAAD,EAAuBC,uBAAvB,IAAkDtB,QAAQ,CAAC,EAAD,CAAhE;AACA,QAAM,CAACuB,yBAAD,EAA4BC,4BAA5B,IAA4DxB,QAAQ,CAAC,EAAD,CAA1E;AACA,QAAM,CAACyB,kBAAD,EAAqBC,qBAArB,IAA8C1B,QAAQ,CAAC,IAAD,CAA5D;AACA,QAAM,CAAC2B,eAAD,EAAkBC,kBAAlB,IAAwC5B,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAAC6B,oBAAD,EAAuBC,uBAAvB,IAAkD9B,QAAQ,CAAC,EAAD,CAAhE;AACA,QAAM,CAAC+B,aAAD,EAAgBC,gBAAhB,IAAoChC,QAAQ,CAAC,IAAD,CAAlD,CAfoB,CAiBpiC,MAAM,GAAGC,KAAK,IAAI;AACpBA,IAAAA,KAAK,CAACC,cAAN;AACApB,IAAAA,cAAc,CAACqB,UAAf,CAA0B,OAA1B;AACAvB,IAAAA,OAAO,CAACwB,IAAR,CAAa,QAAb;AACH,GAJD,CA7IoB,CAmJpB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA,sBACI;AAAA,2BAEI,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,cAArB;AAAA,8BACQ;AAAI,QAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADR,eAEQ,QAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAgB,QAAA,KAAK,EAAC,SAAtB;AAAgC,QAAA,OAAO,EAAEJ,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFR,eAGI,QAAC,GAAD;AAAA,gCACI,QAAC,GAAD;AAAA,iCACI,QAAC,MAAD;AAAS,YAAA,SAAS,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII,QAAC,GAAD;AAAA,iCACI,QAAC,MAAD;AAAQ,YAAA,SAAS,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA6KF,CA7UF;;GAAMzB,S;UAEaN,W,EAGDD,U;;;KALZO,S;AA+UL,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport Nav from '../nav/nav'\n\nimport { Container, Col, Row,  \n    Button} from 'reactstrap';\n\n\nconst AdminPage = () => {\n\n    let location = useLocation()\n    let pathname = location.pathname\n    let providerID = pathname.substring(7)\n    let history = useHistory();\n\n    const token = sessionStorage.getItem('token')\n    const [userInfo, setUserInfo] = useState([])\n    const [admin, setAdmin] = useState(false)\n    const [careProviderSearchID, setCareProviderSearchID] = useState(\"\")\n    const [careProviderSearchResults, setCareProviderSearchResults] = useState([])\n    const [careProviderResult, setCareProviderResult] = useState(true)\n    const [patientSearchID, setPatientSearchID] = useState(\"\")\n    const [patientSearchResults, setPatientSearchResults] = useState([])\n    const [patientResult, setPatientResult] = useState(true)\n\n    // UseEffect function to load authenticated users information\n    // useEffect(() => {\n    //     const getUserData = async () => {\n    //         const response = await fetch(`http://localhost:4000/care_provider/${providerID}`, {\n    //             method: 'GET',\n    //             headers: {\n    //                 'Authorization': `Bearer ${token}`\n    //             }          \n    //         })\n    //         const payload = await response.json()\n    //         setUserInfo(payload)\n\n    //         if (payload[0].isAdmin === 1) {\n    //             setAdmin(true)\n    //         }\n    //     }\n    //     getUserData()    \n    // }, [providerID, token])\n\n    // // Search Care Provider function by employee ID\n    // const searchCareProvider = async event => {\n        \n    //     event.preventDefault()\n    //     const getCareProvider = async () => {\n    //         const response = await fetch(`http://localhost:4000/care_provider/${careProviderSearchID}`, {\n    //             method: 'GET',\n    //             headers: {\n    //                 'Authorization': `Bearer ${token}`\n    //             }          \n    //         })\n    //         const payload = await response.json()\n\n    //         if (response.status >= 400) {\n    //             setCareProviderResult(false)\n    //         } else {\n    //             setCareProviderResult(true)\n    //         }\n    //         setCareProviderSearchResults(payload)\n    //     }\n    //     getCareProvider()    \n    // }\n\n    // // Search Patients function by health card number (10 digits)\n    // const searchPatient = async event => {\n        \n    //     event.preventDefault()\n    //     const getPatient = async () => {\n    //         const response = await fetch(`http://localhost:4000/patient/${patientSearchID}`, {\n    //             method: 'GET',\n    //             headers: {\n    //                 'Authorization': `Bearer ${token}`\n    //             }          \n    //         })\n    //         const payload = await response.json()\n            \n    //         if (response.status >= 400) {\n    //             setPatientResult(false)\n    //         } else {\n    //             setPatientResult(true)\n    //         }\n    //         setPatientSearchResults(payload)\n    //     }\n    //     getPatient()    \n    // }\n\n    // Delete care provider function\n    // const deleteCareProvider = async event => {\n\n    //     let id = careProviderSearchResults[0].careProviderID\n        \n    //     event.preventDefault()\n    //     const deleteRow = async () => {\n    //         const response = await fetch(`http://localhost:4000/care_provider/${id}`, {\n    //             method: 'DELETE',\n    //             headers: {\n    //             }          \n    //         })\n    //         const payload = await response.json()\n    //         alert(payload.message)\n    //         setCareProviderSearchResults([])\n    //     }\n    //     deleteRow()    \n    // }\n\n    // // Delete patient function\n    // const deletePatient = async event => {\n\n    //     let id = patientSearchResults[0].HCN\n        \n    //     event.preventDefault()\n    //     const deleteRow = async () => {\n    //         const response = await fetch(`http://localhost:4000/patient/${id}`, {\n    //             method: 'DELETE',\n    //             headers: {\n    //             }          \n    //         })\n    //         const payload = await response.json()\n    //         alert(payload.message)\n    //         setPatientSearchResults([])\n    //     }\n    //     deleteRow()    \n    // }\n\n    // // To add link to provider page with matching careProviderID\n    // const viewCareProvider = () => {\n    //     history.push(`careproviders/${careProviderSearchID}/${providerID}`)\n    // }\n\n    // // To add link to patient details page with matching HCN\n    // const viewPatient = () => {\n    //     history.push(`patients/${patientSearchID}/${providerID}`)\n    // }\n\n    // // To add link to add a care provider\n    // const addCareProvider = () => {\n    //     history.push(`/admin/addprovider`)\n    // }\n\n    // // To add link to add a patient\n    // const addPatient = () => {\n    //     history.push(`/admin/addpatient`)\n    // }\n\n    // Logout function\n    const logout = event => {\n        event.preventDefault()\n        sessionStorage.removeItem('token')\n        history.push(\"/login\")\n    }\n\n    // // Format DOB function\n    // const formatDOB = (date) => {\n\n    //     if (date) {\n    //         const cleanDate = date.substring(0,10)\n    //         return cleanDate\n    //     } else {\n    //         return date\n    //     }\n    // }\n\n    \n\n    return (   \n        <main>\n            {/* <Nav /> */}\n            <Container className=\"lessCentered\">\n                    <h2 className=\"work-h2\">Administrator Portal</h2> \n                    <Button outline color=\"primary\" onClick={logout}>LOGOUT</Button>\n                <Row>\n                    <Col>\n                        <Button  className=\"manage\">Manage Resume</Button>\n                    </Col>\n                    <Col>\n                        <Button className=\"manage\">Manage Projects</Button>\n                    </Col>\n                </Row>\n            </Container>\n\n\n                {/* {!admin &&\n                    <div>\n                        <Row>\n                            <Col>\n                                <Form onSubmit={searchPatient}>\n                                    <FormGroup>\n                                        <Label for=\"Search Patients\">Search Patients by Health Card Number (10 digits)</Label>\n                                        <Input \n                                            type=\"text\" \n                                            name=\"name\" \n                                            required \n                                            value={patientSearchID} \n                                            onChange={e => setPatientSearchID(e.target.value)} \n                                        />\n                                    </FormGroup>\n                                    <Button color=\"secondary\" type=\"submit\" >Search</Button>{' '} \n                                </Form> \n                                <Table borderless>\n                                    <thead>\n                                        <tr>\n                                            <th>HCN</th>\n                                            <th>First Name</th>\n                                            <th>Last Name</th>\n                                            <th>DOB</th>\n                                            <th></th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                    {!patientResult && patientSearchResults.map((searchResult) => \n                                        <tr>\n                                            <td colSpan='5'>\n                                            {searchResult.message}\n                                            </td>\n                                        </tr>\n                                    )}\n                                    {patientResult === true && patientSearchResults.map((searchResult) => \n                                        <tr>\n                                            <td>{searchResult.HCN}</td>\n                                            <td>{searchResult.firstName}</td>\n                                            <td>{searchResult.lastName}</td>\n                                            <td>{formatDOB(searchResult.dob)}</td>\n                                            <td><Button size=\"sm\" color=\"info\" onClick={viewPatient}>VIEW</Button></td>\n                                            <td></td>\n                                        </tr>\n                                    )}\n                                    </tbody>\n                                </Table>\n                            </Col>\n                            <Col>\n                            </Col>\n                        </Row>  \n                    </div>\n                }       \n                {admin && \n                    <div>\n                        <Row>\n                            <Col>\n                                <Form onSubmit={searchPatient}>\n                                    <FormGroup>\n                                        <Label for=\"Search Patients\">Search Patients by Health Card Number (10 digits)</Label>\n                                        <Input \n                                            type=\"text\" \n                                            name=\"name\" \n                                            required \n                                            value={patientSearchID} \n                                            onChange={e => setPatientSearchID(e.target.value)} \n                                        />\n                                    </FormGroup>\n                                    <Button color=\"secondary\" type=\"submit\" >Search</Button>{' '}\n                                    <Button color=\"primary\" onClick={addPatient}>Add New Patient</Button>\n                                </Form>\n                                <Table borderless>\n                                    <thead>\n                                        <tr>\n                                            <th>HCN</th>\n                                            <th>First Name</th>\n                                            <th>Last Name</th>\n                                            <th>DOB</th>\n                                            <th></th>\n                                            <th></th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                    {!patientResult && patientSearchResults.map((searchResult) => \n                                        <tr>\n                                            <td colSpan='6'>\n                                            {searchResult.message}\n                                            </td>\n                                        </tr>\n                                    )}\n                                    {patientResult &&  patientSearchResults.map((searchResult) => \n                                        <tr>\n                                            <td>{searchResult.HCN || searchResult.message}</td>\n                                            <td>{searchResult.firstName}</td>\n                                            <td>{searchResult.lastName}</td>\n                                            <td>{formatDOB(searchResult.dob)}</td>\n                                            <td><Button size=\"sm\" color=\"info\" onClick={viewPatient}>VIEW</Button></td>\n                                            <td><Button size=\"sm\" outline color=\"danger\" onClick={deletePatient}>DELETE</Button></td>\n                                        </tr>\n                                    )}\n                                    </tbody>\n                                </Table>\n                            </Col>\n                            <Col>\n                                <Form onSubmit={searchCareProvider}>\n                                    <FormGroup>\n                                        <Label for=\"Search Care Provider\">Search Care Provider by ID</Label>\n                                            <Input \n                                                type=\"text\" \n                                                name=\"name\" \n                                                required \n                                                value={careProviderSearchID} \n                                                onChange={e => setCareProviderSearchID(e.target.value)} \n                                            /> \n                                    </FormGroup> \n                                    <Button color=\"secondary\" type=\"submit\" >Search</Button>{' '}\n                                    <Button color=\"primary\" onClick={addCareProvider}>Add New Care Provider</Button>\n                                </Form>\n                                <Table borderless>\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>First Name</th>\n                                            <th>Last Name</th>\n                                            <th>Email</th>\n                                            <th></th>\n                                            <th></th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                    {!careProviderResult && careProviderSearchResults.map((searchResult) => \n                                        <tr>\n                                            <td colSpan='6'>\n                                            {searchResult.message}\n                                            </td>\n                                        </tr>\n                                    )}\n                                    {careProviderResult && careProviderSearchResults.map((searchResult) => \n                                        <tr>\n                                            <td>{searchResult.careProviderID}</td>\n                                            <td>{searchResult.firstName}</td>\n                                            <td>{searchResult.lastName}</td>\n                                            <td>{searchResult.email}</td>\n                                            <td><Button size=\"sm\" color=\"info\" onClick={viewCareProvider}>VIEW</Button></td>\n                                            <td><Button size=\"sm\" outline color=\"danger\" onClick={deleteCareProvider}>DELETE</Button></td>\n                                        </tr>\n                                    )}\n                                    </tbody>\n                                </Table>\n                            </Col>\n                        </Row>\n                    </div>\n                }\n            </Container> */}\n        </main>\n     );\n }\n  \n export default AdminPage;"]},"metadata":{},"sourceType":"module"}